var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = CodecLZOP","category":"page"},{"location":"#CodecLZOP","page":"Home","title":"CodecLZOP","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for CodecLZOP.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [CodecLZOP]","category":"page"},{"location":"#CodecLZOP.LZOPCompressor","page":"Home","title":"CodecLZOP.LZOPCompressor","text":"LZOPCompressor(algo; [block_size=LZOP_DEFAULT_BLOCK_SIZE, crc32=true, filter=identity, optimize=false]) <: TranscodingStreams.Codec\n\nAn implemention of the streaming compression algorithm used by LZOP.\n\nLZO (Lempel-Ziv-Oberhumer) is a variant of the LZ77 compression algorithm. The original implementation of LZO (as implemented in liblzo2) can only compress and decompress entire blocks of in-memory data at once.\n\nLZOP is a command-line utility that adds streaming compression and decompression capabilities to LZO by:\n\nSplitting input data into blocks of fixed size; and\nAdding header information to each block that contains compressed size, uncompressed size, and checksum information.\n\nThis codec implements streaming compression of data using this algorithm. Note that LZOP archives (the output of the LZOP command-line utility) are concatenated collections of files compressed using the LZOP algorithm and contain additional header information for each file: the output of this code will not be directly compatable with the LZOP command line program without adding these file headers.\n\nArguments\n\nalgo: an LibLZO.AbstractLZOAlgorithm, Symbol, or AbstractString describing the LZO algorithm to use when compressing the data.\n\nKeyword Arguments\n\nblock_size::Integer = LZOP_DEFAULT_BLOCK_SIZE: the maximum size of each block into which the input data will be split before compressing with LZO. Cannot be greater than 64 * 2^20 (64 MB).\ncrc32::Bool = true: whether to write a CRC32 checksum to the compressed data header (default) or an Adler32 checksum (crc32=false).\nfilter::Function = identity: a function applied to the compressed data as it is streamed. The function must take a single AbstractVector{UInt8} argument and modify it in place without changing its size.\noptimize::Bool = false: whether to run the LZO optimization function on compressed data before writing it to the stream. Optimization doubles the compression time and rarely results in improved compression ratios, so it is disabled by default.\n\n\n\n\n\n","category":"type"},{"location":"#CodecLZOP.LZOPDecompressor","page":"Home","title":"CodecLZOP.LZOPDecompressor","text":"LZOPDecompressor(algo; [crc32=true, filter=identity, on_checksum_fail=:throw]) <: TranscodingStreams.Codec\n\nAn implemention of the streaming decompression algorithm used by LZOP.\n\nLZO (Lempel-Ziv-Oberhumer) is a variant of the LZ77 compression algorithm. The original implementation of LZO (as implemented in liblzo2) can only compress and decompress entire blocks of in-memory data at once.\n\nLZOP is a command-line utility that adds streaming compression and decompression capabilities to LZO by:\n\nSplitting input data into blocks of fixed size; and\nAdding header information to each block that contains compressed size, uncompressed size, and checksum information.\n\nThis codec implements the decompression of data in this format. Note that LZOP archives (the output of the LZOP command-line utility) are concatenated collections of files compressed using the LZOP algorithm and contain additional header information for each file and cannot be decompressed directly using this codec.\n\nArguments\n\nalgo: an LibLZO.AbstractLZOAlgorithm, Symbol, or AbstractString describing the LZO algorithm to use when decompressing the data. The decompression algorithm must match the algorithm used to compress the data.\n\nKeyword Arguments\n\ncrc32::Bool = true: whether the checksum in the compressed data is CRC32 (default) or Adler32 (crc32=false).\nfilter::Function = identity: a function applied to the decompressed data as it is streamed. The function must take a single AbstractVector{UInt8} argument and modify it in place without changing its size.\non_checksum_fail::Symbol = :throw: a flag to determine how checksum failures are handled. :throw will cause an ErrorException to be thrown, :warn will log a warning using the @warn macro, and :ignore will silently ignore the failure.\n\n\n\n\n\n","category":"type"},{"location":"#CodecLZOP.compress_block-Union{Tuple{F}, Tuple{AbstractVector{UInt8}, IO, LibLZO.AbstractLZOAlgorithm}} where F<:Function","page":"Home","title":"CodecLZOP.compress_block","text":"compress_block(input, output, algo; [kwargs...])::Tuple{Int,Int}\n\nCompress a block of data from `input` to `output` using LZO algorithm `algo`, returning the number of bytes read from `input` and written to `output`.\n\nArguments\n\ninput: An AbstractVector{UInt8} or IO object containing the block of data to compress.\noutput::IO: Output IO object to write the compressed block.\n\nKeyword arguments\n\nblock_size::Integer = LZOP_DEFAULT_BLOCK_SIZE: Number of bytes to read from input. Will cap at LZOP_MAX_BLOCK_SIZE.\ncrc32::Bool = false: If true, write a CRC-32 checksum for both uncompressed and compressed data. If false, write Adler32 checksums instead.\nfilter_function::Function = identity: Transform the input data using the specified filter functions. The filter function must accept a single AbstractVector{UInt8} argument and must modify that vector in-place.\noptimize::Bool = false: If true, process the data twice to optimize how it is stored for faster decompression. Setting this to true doubles compression time with little to no improvement in decompression time, so its use is not recommended.\n\n\n\n\n\n","category":"method"},{"location":"#CodecLZOP.decompress_block-Union{Tuple{F}, Tuple{IO, IO, LibLZO.AbstractLZOAlgorithm}} where F<:Function","page":"Home","title":"CodecLZOP.decompress_block","text":"decompress_block(input, output, algo; [kwargs...])::Tuple{Int,Int}\n\nDecompress a block of data from `input` to `output` using LZO algorithm `algo`, returning the number of bytes read from `input` and written to `output`.\n\nArguments\n\ninput: An AbstractVector{UInt8} or IO object containing the block of LZO-compressed data to decompress.\noutput::IO: Output IO object to write the decompressed block.\n\nKeyword arguments\n\ncrc32::Bool = false: If true, assume the checksum written to the block for both uncompressed and compressed data is a CRC-32 checksum. If false, assume Adler32 checksums instead.\nfilter_function::Function = identity: Untransform the output data using the specified filter function. The filter function must take a single AbstractVector{UInt8} argument and modify it in place.\non_checksum_fail::Symbol = :throw: Choose how the function responds to invalud checksums. If :throw, an ErrorException will be thrown. If :warn, a warning will be printed. If :ignore, the checksum values will be completely ignored.\n\n\n\n\n\n","category":"method"}]
}
